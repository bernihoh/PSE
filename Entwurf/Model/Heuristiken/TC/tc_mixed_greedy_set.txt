class TCMixedFlexSet:
	OrderedList<int> vertices
	OrderedList<SimpleUndirectedEdge> edges
	int flexValue

class TCMixedGreedySetData extends TCData:
	HashSet<int, TCMixedFlexSet> minFlexSets

	void init():
		for v in graph.getVertices():
			calcMinFlexSet(v)

	void justColoredVertex(int v): pass
	void justColoredEdge(SimpleUndirectedEdge e): pass

	void calcMinFlexSet(int v):
		OrderedList<SimpleUndirectedEdge> uncoloredEdges
		for e in graph.getIncidentEdges(v) where freeEdgeColors.contains(e):
			uncoloredEdges.append(e)

		if not freeVertexColors.contains(v) and uncoloredEdges.isEmpty():
			minFlexSets.remove(v)
			minFlexValues.remove(v)
		else
			List<TCMixedFlexSet> flexSets
			for edges in uncoloredEdges.sublists():
				flexSets.append(TCMixedFlexSet(edges, getFlex(edges)))

				if freeVertexColors.contains(v):
					flexSets.append(TCMixedFlexSet([v], edges, getFlex([v], edges)))
			minFlexSet = argmin(flexSets, set -> set.flexValue)
			minFlexSets[v] = minFlexSet

class TCGreedySet extends TCHeuristic:
	TCResult applyTo(SimpleUndirectedGraph graph):
		//init result and data
		result = TCResult(graph, this)
		data = TCGreedyFewData(graph)
		data.init()

		//color minimal flexibility sets until there is no one left
		while not data.minFlexSets.isEmpty():
			//find minimal flex set
			minFlexSet = argmin(data.minFlexSets.keys(), v -> data.minFlexSets[v].flexValue)

			//stop heuristic if flexibility < 0
			if minFlexValue < 0:
				result.valid = false
				//TODO error data
				return result

			//color all vertices in the flex set
			for v in minFlexSet.vertices:
				//stop heuristic if vertex cannot be colored
				if data.freeVertexColors[v].isEmpty():
					result.valid = false
					//TODO error data
					return result

				//find minimally used free color of v
				c = argmin(data.freeVertexColors[v], c -> data.colorWeights[c])

				//color v with color c
				colorVertex(v, c, data, result)
	
			//color all edges in the flex set
			for e in minFlexSet.edges:
				//stop heuristic if edge cannot be colored
				if data.freeEdgeColors[e].isEmpty():
					result.valid = false
					//TODO error data
					return result

				//find minimally used free color of e
				c = argmin(data.freeEdgeColors[e], c -> data.colorWeights[c])

				//color e with color c
				colorEdge(e, c, data, result)

		//total coloring successfull created
		result.valid = true
		return result
				
class TCGreedyConData extends TCData:
	OrderedList<SimpleUndirectedEdge> uncoloredEdges

	void init()
		for e in graph.edges where freeEdgeColors.contains(e):
			uncoloredEdges.add(e)

	void justColoredVertex(int v): pass

	void justColoredEdge(SimpleUndirectedEdge e):
		uncoloredEdges.remove(e)


	OrderedList<SimpleUndirectedEdge> getMinFlexSet(maxSetSize):
		HashSet<OrderedList> connectedSubsets

		//find all connected sets of edges
		for sublist in uncoloredEdges.sublists(maxSetSize):
			//TODO create graph on these edges and check if it is connected

		//return connected set of uncolored edges with minimal flexibility
		return argmin(connectedSubsets, edges -> getFlex(edges))

class TCGreedyCon extends TCHeuristic:
	int maxSetSize

	TCResult applyTo(SimpleUndirectedGraph graph):
		//init result and data
		result = TCResult(graph, this)
		data = TCGreedyFewData(graph)

		//start BFS
		int v = 0
		bfs = BFS(graph, 0)

		//color vertex for vertex
		while bfs.hasNextVertex():
			//stop heuristic if vertex cannot be colored
			if data.freeVertexColors[v].isEmpty():
				result.valid = false
				//TODO error data
				return result

			//find minimally used free color of v
			c = argmin(data.freeVertexColors[v], c -> data.colorWeights[c])

			//color v with color c
			colorVertex(v, c, data, result)

			//goto next vertex
			v = bfs.getNextVertex()

		//init list of uncolored edges
		data.init()

		//color edges in connected sets of minimal flexibility
		while not data.uncoloredEdges.isEmpty():
			minFlexSet = data.getMinFlexSet()

			//stop heuristic if flexibility < 0
			minFlexValue = data.getFlex(minFlexSet)

			if minFlexValue < 0:
				data.valid = false
				//TODO error data
				return result

			//color all edges in the flex set
			for e in minFlexSet:
				//stop heuristic if edge cannot be colored
				if data.freeEdgeColors[e].isEmpty():
					data.valid = false
					//TODO error data
					return result

				//find minimally used free color of e
				c = argmin(data.freeEdgeColors[e], c -> data.colorWeights[c])

				//color e with color c
				colorEdge(e, c, data, result)

		//total coloring successfully calculated
		result.valid = true
		return result



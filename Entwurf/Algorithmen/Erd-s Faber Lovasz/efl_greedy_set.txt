class EFLGreedySetData extends EFLGreedyData:
	HashSet<int, OrderedList<SimpleHyperEdge>> minFlexSets
	HashSet<int, int> minFlexValues

	void init():
		for v in graph.getVertices():
			calcMinFlexSet(v)

	void justColoredVertex(int v): pass
	void justColoredEdge(SimpleHyperEdge e): pass

	void calcMinFlexSet(int v):
		OrderedList<SimpleHyperEdge> uncoloredEdges
		for e in graph.getIncidentEdges(v) where freeEdgeColors.contains(e):
			uncoloredEdges.append(e)

		if uncoloredEdges.isEmpty():
			minFlexSets.remove(v)
			minFlexValues.remove(v)
		else:
			uncoloredEdges.sort()

			(minFlexSet, minFlexValue) = argValMin(uncoloredEdges.sublists(), list -> getFlex(list))

			minFlexSets[v] = minFlexSet
			minFlexValues[v] = minFlexValue

class EFLGreedySet extends EFLHeuristic:
	EFLResult applyTo(SimpleHyperGraph graph):
		//init result and data
		result = EFLResult(graph, this)
		data = EFLGreedyFewData(graph)
		data.init()

		//color minimal flexibility sets until there is no one left
		while not data.minFlexSets.isEmpty():
			//find minimal flex set
			(minFlexSet, minFlexValue) = argvalmin(data.minFlexSets.keys(), v -> data.minFlexValues[v])

			//stop heuristic if flexibility < 0
			if minFlexValue < 0:
				result.valid = false
				//TODO error data
				return result

			//color all edges in the flex set
			for e in minFlexSet:
				//stop heuristic if edge cannot be colored
				if data.freeEdgeColors[e].isEmpty():
					result.valid = false
					//TODO error data
					return result

				//find minimally used free color of e
				c = argmin(data.freeEdgeColors[e], c -> data.colorWeights[c])

				//color e with color c
				colorEdge(e, c, data, result)

			//recalculate touched flex sets
			for v in graph.getIncidentVertices(minFlexSet):
				data.calcMinFlexSet(v)

		//coloring successfully calculated
		result.valid = true
		return result
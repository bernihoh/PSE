abstract class Graph<E extends Edge>
	int numVertices
	HashSet<E> edges

	OrderedList<int> getVertices():
		return [0..numVertices-1]

	abstract bool isConnected()

	abstract bool areIncident(int v, E e)
	abstract bool areAdjacent(int v, int w)
	abstract bool areAdjacent(E e, E f)

	abstract OrderedList<int> getAdjacentVertices(int v)
	abstract OrderedList<E> getIncidentEdges(int v)
	abstract OrderedList<int> getIncidentVertices(List<E> edges)


abstract class Edge<E extends Edge>:
	abstract bool equals(E e)
	abstract int compare(E e)

	abstract OrderedList<int> getVertices()



class SimpleUndirectedGraph extends Graph<SimpleUndirectedEdge>:
	bool isConnected():
		//TODO use BFS to check whether graph is connected

	bool isBipartite():
		//TODO use BFS to check whether graph is bipartite

	bool isForest():
		//TODO use BFS to check whether graph is tree

	bool isPlanar():
		//TODO use external library to check whether graph is planar


	bool areIncident(int v, SimpleUndirectedEdge e):
		return e.x == v or e.y == v

	bool areAdjacent(int v, int w):
		return edges.contains(SimpleUndirectedEdge(v,w))

	bool areAdjacent(SimpleUndirectedEdge e, SimpleUndirectedEdge f):
		return areIncident(e.x, f) or areIncident(e.y, f)


	OrderedList<int> getAdjacentVertices(int v):
		List<int> neighbors
		for e in edges:
			if e.x == v:
				neighbors.add(e.y)
			if e.y == v:
				neighbors.add(e.x)
		return neighbors.sort()

	OrderedList<SimpleUndirectedEdge> getIncidentEdges(int v):
		List<SimpleUndirectedEdge> incidentEdges
		for e in edges:
			if areIncident(v,e):
				incidentEdges.add(e)
		return incidentEdges.sort()

	OrderedList<int> getIncidentVertices(List<SimpleUndirectedEdge> edges):
		HashSet<int> incidentVertices
		for e in edges:
			incidentVertices.add(e.x)
			incidentVertices.add(e.y)
		return incidentVertices.sort()


class SimpleUndirectedEdge extends Edge<SimpleUndirectedEdge>:
	int x	//ASSERT x < y
	int y

	bool equals(SimpleUndirectedEdge e):
		return e.x == x and e.y == y

	int compare(SimpleUndirectedEdge e):
		if x < e.x:
			return -1
		else if x> e.x
			return 1
		else if x == e.x
			if y < e.y:
				return -1
			else if y > e.y:
				return 1

		return 0

	OrderedList<int> getVertices():
		return [x,y]


class SimpleHyperGraph extends Graph<SimpleHyperEdge>:
	//TODO assert hypergraph is simple

	bool isConnected():
		//TODO use BFS to check whether graph is connected


	bool areIncident(int v, SimpleHyperEdge e):
		return e.vertices.contains(v)

	bool areAdjacent(int v, int w):
		for e in edges:
			if e.vertices.contains(v) and e.vertices.contains(w):
				return true
		return false

	bool areAdjacent(SimpleHyperEdge e, SimpleHyperEdge f):
		return not e.vertices.intersectWith(f.vertices).isEmpty()


	OrderedList<int> getAdjacentVertices(int v):
		HashSet<int> neighbors
		for e in edges:
			if e.vertices.contains(v):
				neighbors.add(e.vertices)
		neighbors.remove(v)
		return neighbors.sort()

	OrderedList<SimpleHyperEdge> getIncidentEdges(int v):
		List<SimpleHyperEdge> incidentEdges
		for e in edges:
			if e.vertices.contains(v):
				incidentEdges.add(e)
		return incidentEdges.sort()

	OrderedList<int> getIncidentVertices(List<SimpleHyperEdge> edges):
		HashSet<int> incidentVertices
		for e in edges:
			incidentVertices.add(e.vertices)
		return incidentVertices.sort()


class SimpleHyperEdge extends Edge<SimpleHyperEdge>:
	OrderedList<int> vertices

	bool equals(SimpleHyperEdge e):
		return vertices.equals(e.vertices)

	int compare(SimpleHyperEdge e):
		//TODO how shall hyperedges be sorted?

	OrderedList<int> getVertices():
		return vertices